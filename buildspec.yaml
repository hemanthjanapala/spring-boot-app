version: 0.2

phases:
  pre_build:
    commands:
      - echo Starting pre-build phase...
      - mvn clean install -DskipTests
      - echo Logging in to Amazon ECR...
      - aws --version
      - REPOSITORY_URI=597088037282.dkr.ecr.us-east-2.amazonaws.com/code-app
      - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $REPOSITORY_URI
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
      # Pull PostgreSQL image
      - echo Pulling PostgreSQL image...
      - docker pull postgres:latest
      # Start PostgreSQL container
      - echo Starting PostgreSQL container...
      - docker run -d --name postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=0000 -e POSTGRES_DB=postgres -p 5432:5432 postgres:latest
      # Ensure PostgreSQL is running
      - echo Waiting for PostgreSQL to start...
      - sleep 10
      - docker ps

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
      # Run application tests against PostgreSQL
      - echo Running application tests...
      - mvn test

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"course-service","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo Writing image definitions file...
      # Add your container name
      - DOCKER_CONTAINER_NAME=code-app
      - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo $DOCKER_CONTAINER_NAME
      - echo Printing imagedefinitions.json
      - cat imagedefinitions.json
      # Stop and clean up PostgreSQL container
      - echo Stopping and cleaning up PostgreSQL container...
      - docker stop postgres
      - docker rm postgres

artifacts:
  files:
    - imagedefinitions.json
    - target/course-service.jar
